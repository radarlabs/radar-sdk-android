import io.radar.ci.GitHubActions
import io.radar.ci.GitHubClient
import io.radar.ci.SnapshotDispatcher
// Removed custom mvnpublish dependency â€“ switching to standard Gradle publishing

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "org.jetbrains.dokka"
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    radarVersion = '3.23.4'
}

String buildNumber = ".${System.currentTimeMillis()}"
GitHubActions githubRelease = GitHubActions.get()
boolean isSnapshot = false
if (githubRelease) {
    if (githubRelease.snapshot) {
        // Use the existing radarVersion with the -SNAPSHOT suffix
        isSnapshot = true
        buildNumber = '-SNAPSHOT'
    } else {
        buildNumber = ''
        // Use the tag from the release name as the version-to-publish / include in source code
        ext.radarVersion = githubRelease.tag
    }
}

android {
    compileSdkVersion 34
    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 34
        buildConfigField "String", "VERSION_NAME", "\"$radarVersion\""
        multiDexEnabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    lintOptions {
        warningsAsErrors true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.4")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.4.0"
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "com.google.android.gms:play-services-location:21.0.1"
    implementation "androidx.activity:activity:1.2.0"
    implementation "androidx.fragment:fragment:1.3.0"
    compileOnly "com.huawei.hms:location:6.4.0.300"
    compileOnly "com.google.android.play:integrity:1.2.0"
    testImplementation "androidx.test.ext:junit:1.1.5"
    testImplementation "org.robolectric:robolectric:4.10"
    testImplementation 'org.json:json:20211205'
    testImplementation "com.google.android.play:integrity:1.2.0"
}

task androidSourcesJar(type: Jar) {
    group 'publishing'
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

dokkaHtml.configure {
    outputDirectory.set(file("$rootDir/docs"))

    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
    }
}

dokkaJavadoc.configure {
    outputDirectory.set(file("$buildDir/javadocs"))
}

task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
    group 'publishing'
    archiveClassifier.set("javadoc")
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives androidSourcesJar, androidJavadocsJar
}

// ----------------------------
//  Gradle Maven Publishing
// ----------------------------
publishing {
    publications {
        sdk(MavenPublication) {
            groupId 'io.radar'
            artifactId 'sdk'
            version "$radarVersion$buildNumber"

            artifact("$buildDir/outputs/aar/${project.name}-release.aar")
            artifact androidSourcesJar
            artifact androidJavadocsJar

            pom {
                name = 'Radar Android SDK'
                description = 'Android SDK for Radar, the leading geofencing and location tracking platform'
                url = 'https://radar.io'

                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                organization {
                    name = 'Radar Labs, Inc.'
                    url = 'https://radar.io'
                }

                developers {
                    developer {
                        id = 'radarlabs'
                        name = 'Radar Labs, Inc.'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com:radarlabs/radar-sdk-android.git'
                    developerConnection = 'scm:git:ssh://github.com:radarlabs/radar-sdk-android.git'
                    url = 'https://github.com/radarlabs/radar-sdk-android'
                }
            }
        }
    }
}

// ----------------------------
//  Artifact Signing
// ----------------------------
signing {
    def signingKey = project.findProperty('SIGNINGKEY')
    def signingPassword = project.findProperty('SIGNINGPASSWORD')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.sdk
}

// Ensure signing tasks depend on the AAR being built
afterEvaluate {
    tasks.withType(Sign) {
        dependsOn bundleReleaseAar
    }
}

task dispatchSnapshot {
    group 'ci'
    description 'Send event to notify listeners that a new SNAPSHOT build has been published.'
    String username = System.getenv('PAT_USERNAME')
    String password = System.getenv('PAT_TOKEN')
    doLast {
        GitHubClient.ApiResponse result = SnapshotDispatcher.dispatchSnapshotEvent(username, password, "$radarVersion$buildNumber")
        if (result.success) {
            logger.debug("Successfully sent repository dispatch ($result.status)!")
        } else {
            logger.log(LogLevel.ERROR, "Could not send repository dispatch! $result.status: ${result.message ?: ''}\n ${result.data ?: ''}")
        }
    }
}
